#!/usr/bin/env node
/* eslint-disable no-underscore-dangle, no-console */

const commander = require('commander');
const fs = require('fs');
const { Tail } = require('tail');
const { spawn, exec } = require('child_process');
const path = require('path');
const asteroid = require('asteroid');

const pkginfo = require('./package.json');

function log(msg) {
  console.log(`## LOG: ${new Date().toISOString()} ${msg}`);
}

function error(msg) {
  console.error(`## ERROR: ${new Date().toISOString()} ${msg}`);
}

function customExitOverride(cmd) {
  return function(err) {
    if (err.code === 'commander.missingMandatoryOptionValue'
    || err.code === 'commander.missingArgument') {
      cmd.help();
    }
  };
}

class GeneNoteBookConnection {
  constructor({ port, username, password }) {
    const endpoint = `ws://localhost:${port}/websocket`;
    const SocketConstructor = WebSocket;
    const Connection = asteroid.createClass();
    this.connection = new Connection({ endpoint, SocketConstructor });
    this.username = username;
    this.password = password;
  }

  call(methodName, methodOpts) {
    this.connection
      .loginWithPassword({
        username: this.username,
        password: this.password,
      })
      .then((loginResult) => {
        log('Logged in');
        return this.connection.call(methodName, methodOpts);
      }).then((methodResult) => {
        const {
          result: {
            ok, writeErrors, writeConcernErrors, nInserted,
          },
        } = methodResult;
        log(`${methodName} inserted ${nInserted} elements`);
        this.connection.disconnect();
      }).catch(({ error }) => {
        error(error);
        this.connection.disconnect();
      });
  }
}

function checkMongoLog(logPath) {
  const tail = new Tail(logPath);
  tail.on('line', function (line) {
    const parts = line.split(' ');
    const status = parts[1];
    if (status === 'E') {
      error(`MongoDB error: ${parts.slice(2).join(' ')}`);
      process.exit(1);
    }
  });
}

function startMongoDaemon(dbPath, mongoPort) {
  const dataFolderPath = `${dbPath}/data`;
  const logFolderPath = `${dbPath}/log`;
  exec(`mkdir -p ${dataFolderPath} ${logFolderPath}`);
  const logPath = `${dbPath}/log/mongod.log`;

  log(`Using DB path: ${dbPath}`);
  log(`MongoDB data files are in ${dataFolderPath}`);
  log(`MongoDB logs are in ${logFolderPath}`);
  log('Starting MongoDB daemon');
  const MONGO_URL = `mongodb://localhost:${mongoPort}/genenotebook`;
  const mongoDaemon = spawn('mongod', [
    '--port',
    mongoPort,
    '--dbpath',
    dataFolderPath,
    '--logpath',
    logPath,
  ]);

  mongoDaemon.on('error', function (err) {
    error(err);
  });

  mongoDaemon.stderr.on('data', function (chunk) {
    error(chunk.toString('utf8'));
  });

  mongoDaemon.stdout.on('data', function (chunk) {
    const msg = chunk.toString('utf8')
      .split(' ')
      .slice(5)
      .join(' ');
    log(`MongoDB message: ${msg}`);
    checkMongoLog(logPath);
  });

  const connection = {
    mongoDaemon,
    MONGO_URL,
  };

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(connection);
    }, 10000);
  });
}

async function startGeneNoteBook(cmd) {
  const PORT = parseInt(cmd.port, 10) || 3000;
  const ROOT_URL = cmd.rootUrl || `http://localhost:${PORT}`;
  const opts = { PORT, ROOT_URL };

  if (fs.existsSync('settings.json') && !('METEOR_SETTINGS' in process.env)) {
    const METEOR_SETTINGS = fs.readFileSync('settings.json', 'utf8');
    Object.assign(opts, { METEOR_SETTINGS });
  }

  if (cmd.mongoUrl) {
    if (cmd.dbPath) {
      throw new Error('--db-path and --mongo-url are mutually exclusive');
    }
    Object.assign(opts, { MONGO_URL: cmd.mongoUrl });
  } else {
    const dbPath = cmd.dbPath || './db';
    const mongoPort = cmd.mongoPort || 27017;
    const { MONGO_URL, mongoDaemon } = await startMongoDaemon(
      path.resolve(dbPath),
      mongoPort,
    );
    Object.assign(opts, { MONGO_URL });
    process.on('exit', function () {
      log('Shutting down mongo daemon');
      mongoDaemon.kill();
    });
  }
  Object.assign(process.env, opts);
  // eslint-disable-next-line global-require, import/no-unresolved
  require('./main.js.js');
}

const program = new commander.Command();

program
  .version(pkginfo.version, '-v, --version')
  .usage('[command]')
  .exitOverride(customExitOverride(program));

// run
program
  .command('run')
  .description('Run a GeneNoteBook server')
  .usage('[options]')
  .option('--port [port]', 'Web server port on which to serve GeneNoteBook. Default: 3000')
  .option(
    '-m, --mongo-url [url]',
    'URL of running MongoDB daemon and database name, for example mongodb://localhost:27017/genenotebook (Mutually exclusive with --dbpath)',
  )
  .option(
    '-d, --db-path [path]',
    'Folder where DB files will be stored. Default: ./db.'
    + ' (Mutually exclusive with --mongo-url)',
  )
  .option(
    '--mongo-port [port]', 'Port on which the mongo daemon will serve. Default: 27017',
  )
  .option(
    '-r, --root-url [url]',
    'Root URL on which GeneNoteBook will be accessed. Default: http://localhost',
  )
  .action((_, command) => {
    startGeneNoteBook(command);
  });

// add
const add = program
  .command('add [command]')
  .description('Add data to a running GeneNoteBook server')
  .usage('[command]');

// add genome
const addGenome = add
  .command('genome');

addGenome.description('Add reference genome')
  .usage('[options] <genome fasta file>')
  .arguments('<file>')
  .option('-u, --username <username>', 'GeneNoteBook admin username')
  .option('-p, --password <password>', 'GeneNoteBook admin password')
  .option('-n, --name [name]', 'Reference genome name. Default: fasta file name')
  .option('--port [port]', 'Port on which GeneNoteBook is running. Default: 3000')
  .action((file, cmd) => {
    if (typeof file !== 'string') program.help();
    const fileName = path.resolve(file);
    const {
      username, password, name, port = 3000,
    } = cmd.opts();

    if (!(fileName && username && password)) {
      cmd.help();
    }
    const genomeName = name || fileName.split('/').pop();

    new GeneNoteBookConnection({ username, password, port })
      .call('addGenome', { genomeName, fileName });
  })
  .on('--help', function () {
    console.log(`
Example:
    genenotebook add genome -u admin -p admin -n test testdata.fasta
    `);
  })
  .exitOverride(customExitOverride(addGenome));

// add annotation
const addAnnotation = add
  .command('annotation');

addAnnotation
  .description('Add fasta formatted reference genome to a running GeneNoteBook server')
  .usage('[options] <annotation gff3 file>')
  .arguments('<file>')
  .option('-u, --username <username>', 'GeneNoteBook admin username')
  .option('-p, --password <password>', 'GeneNoteBook admin password')
  .option(
    '-n, --genome-name <name>',
    'Reference genome name to which the annotation should be added',
  )
  .option('--port [port]', 'Port on which GeneNoteBook is running. Default: 3000')
  .option('-v, --verbose', 'Verbose warnings during GFF parsing')
  .action((file, cmd) => {
    if (typeof file !== 'string') program.help();
    const fileName = path.resolve(file);
    const {
      username, password, genomeName, port = 3000, verbose = false,
    } = cmd.opts();

    if (!(fileName && username && password)) {
      cmd.help();
    }

    new GeneNoteBookConnection({ username, password, port })
      .call('addAnnotationTrack', { fileName, genomeName, verbose });
  })
  .exitOverride(customExitOverride(addAnnotation));

// add transcriptome
const addTranscriptome = add
  .command('transcriptome');

addTranscriptome
  .description('Add Kallisto quantified gene expression to a running GeneNoteBook server')
  .usage('[options] <Kallisto abundance.tsv file>')
  .arguments('<file>')
  .option('-u, --username <username>', 'GeneNoteBook admin username')
  .option('-p, --password <password>', 'GeneNoteBook admin password')
  .option('--port [port]', 'Port on which GeneNoteBook is running. Default: 3000')
  .option('-s, --sample-name <sample name>', 'Unique sample name')
  .option('-r, --replica-group <replica group>', 'Identifier to group samples that belong to the same experiment')
  .option('-d, --sample-description <description>', 'Description of the experiment')
  .action((file, cmd) => {
    if (typeof file !== 'string') program.help();
    const fileName = path.resolve(file);

    const {
      username, password, port = 3000, ...opts
    } = cmd.opts();
    const sampleName = opts.sampleName || fileName;
    const replicaGroup = opts.replicaGroup || fileName;
    const description = opts.sampleDescription || 'description';

    if (!(fileName && username && password)) {
      program.help();
    }
    new GeneNoteBookConnection({ username, password, port })
      .call('addTranscriptome', {
        fileName, sampleName, replicaGroup, description,
      });
  })
  .exitOverride(customExitOverride(addTranscriptome));

// add interproscan
const addInterproscan = add
  .command('interproscan');

addInterproscan.description(
  'Add InterProScan results to a running GeneNoteBook server',
)
  .usage('[options] <InterProScan gff3 output file>')
  .arguments('<file>')
  .option('-u, --username <username>', 'GeneNoteBook admin username')
  .option('-p, --password <password>', 'GeneNoteBook admin password')
  .option('--port [port]', 'Port on which GeneNoteBook is running. Default: 3000')
  .action((file) => {
    if (typeof file !== 'string') program.help();
    const fileName = path.resolve(file);
    const { username, password, port = 3000 } = program.opts();

    if (!(fileName && username && password)) {
      program.help();
    }
    new GeneNoteBookConnection({ username, password, port })
      .call('addInterproscan', { fileName });
  })
  .exitOverride(customExitOverride(addInterproscan));

// add orthogroups
const addOrthogroups = add
  .command('orthogroups');

addOrthogroups.description('Add Orthogroup phylogenetic trees to a running GeneNoteBook server')
  .usage('[options] <Folder with (e.g. OrthoFinder) tree files>')
  .arguments('<folder>')
  .requiredOption('-u, --username <username>', 'GeneNoteBook admin username')
  .requiredOption('-p, --password <password>', 'GeneNoteBook admin password')
  .option('--port [port]', 'Port on which GeneNoteBook is running. Default: 3000')
  .action((file, cmd) => {
    if (typeof file !== 'string') program.help();
    const folderName = path.resolve(file);

    const { username, password, port = 3000 } = cmd.opts();

    if (!(folderName && username && password)) {
      program.help();
    }

    new GeneNoteBookConnection({ username, password, port })
      .call('addOrthogroups', { folderName });
  })
  .exitOverride(customExitOverride(addInterproscan));

const remove = program.command('remove [type]', 'Remove data from a running GeneNoteBook server');

const list = program.command('list', 'List contents of a running GeneNoteBook server');

program.parse(process.argv);
